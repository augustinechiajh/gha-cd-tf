name: "Terraform Deployment"

description: "Performs Terraform init, plan, and apply for a given environment using appropriate var and backend config files."

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment name (e.g., dev, staging, prod)"
        required: true
        type: string
        default: "dev"
      terraform-work-dir:
        description: "Terraform working directory"
        required: true
        type: string
        default: 'iac/tf'
      is-destroy:
        description: "If true, destroy terraform infra"
        type: boolean
        required: false
        default: false
      debug-logs:
        description: "If true, enable TF_LOG=DEBUG"
        type: boolean
        required: false
        default: false
    
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_IMPERSONATOR_SA:
        required: true
      GCP_DEPLOYMENT_SA:
        required: false
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_IMPERSONATOR_SA }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check Terraform directory exists
        run: |
          if [ -z "${{ inputs.terraform-work-dir }}" ]; then
            echo "Error: 'terraform-work-dir' input is required but not set." | tee -a ${LOGFILE}
            exit 1
          fi
          if [ ! -d "${{ inputs.terraform-work-dir }}" ]; then
            echo "Directory ${{ inputs.terraform-work-dir }} does not exist."
            exit 1
          fi
      - name: Set environment flags
        id: set-env
        run: |
          echo "IS_DESTROY=$([ '${{ inputs.is-destroy }}' == 'true' ] && echo '-destroy' || echo '')" >> $GITHUB_ENV
          echo "TF_LOG=$([ '${{ inputs.debug-logs }}' == 'true' ] && echo 'DEBUG' || echo '')" >> $GITHUB_ENV
          echo "TF_LOG_PATH=$([ '${{ inputs.debug-logs }}' == 'true' ] && echo 'terraform-debug.log' || echo '')" >> $GITHUB_ENV
        
      - name: Terraform init
        working-directory: ${{ inputs.terraform-work-dir }}
        run: |
          echo "Running terraform init -backend-config=backend.${{ inputs.environment }}.conf"
          terraform init -backend-config="backend.${{ inputs.environment }}.conf"
      
      - name: Terraform plan
        working-directory: ${{ inputs.terraform-work-dir }}
        run: |
          echo "Running terraform fmt -check -recursive"
          terraform fmt -check -recursive

          echo "Running terraform plan -var-file=terraform.${{ inputs.environment }}.tfvars -out=tfplan"
          terraform plan ${IS_DESTROY} -var-file="terraform.${{ inputs.environment }}.tfvars" -out="tfplan"
          terraform show -json tfplan > tfplan.json

          if [ "$TF_LOG" = "DEBUG" ]; then
            echo "=== TF LOG OUTPUT ==="
            cat terraform-debug.log || echo "No log file found."
          fi
      
      - name: Terraform Apply
        working-directory: ${{ inputs.terraform-work-dir }}
        run: |
          echo "Running terraform apply -input=false -auto-approve tfplan"
          terraform apply -input=false -auto-approve "tfplan"

          if [ "$TF_LOG" = "DEBUG" ]; then
            echo "=== TF LOG OUTPUT ==="
            cat terraform-debug.log || echo "No log file found."
          fi